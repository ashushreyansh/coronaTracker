{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/ContactsFooter/ContactsFooter.jsx","images/image (2).png","App.js","reportWebVitals.js","index.js","components/Cards/Cards.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","Grid","container","spacing","justify","item","component","Card","xs","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableurl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","initialDailyData","fetchAPI","lineChart","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFecthedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","ContactsFooter","AppBar","position","Container","maxWidth","Toolbar","Link","href","App","state","fetchedData","setState","this","image","src","CoronaImage","alt","Chart","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c25e5222.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Pgoci\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2Z0eF\"};","import React from 'react';\r\nimport { Card, Typography, Grid, CardContent } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({data: { confirmed, recovered, deaths, lastUpdate }}) => {\r\n    \r\n    if(!confirmed){\r\n        return 'loading...';\r\n    }\r\n    return(\r\n        <div className=\"{styles.container}\">\r\n            <Grid container spacing ={3} justify =\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start = {0}\r\n                                end = {confirmed.value}\r\n                                duration = {4.5}\r\n                                separator = \",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of Covid -19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start = {0}\r\n                                end = {recovered.value}\r\n                                duration = {4.0}\r\n                                separator = \",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of Recoveries from Covid -19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp \r\n                                start = {0}\r\n                                end = {deaths.value}\r\n                                duration = {3.0}\r\n                                separator = \",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by Covid -19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\nexport const fetchData = async  (country) => {\r\n    let changeableurl = url;\r\n    if(country){\r\n        changeableurl = `${url}/countries/${country}`;\r\n    }\r\n    try {\r\n        const { data: {confirmed, recovered, deaths, lastUpdate} } = await axios.get(changeableurl);\r\n        \r\n        return { confirmed, recovered, deaths, lastUpdate};\r\n\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React,  {useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Charts = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState({});\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            const initialDailyData = await fetchDailyData();\r\n\r\n            setDailyData(initialDailyData);\r\n        }\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData[0]\r\n           ?   \r\n                (\r\n                    <Line \r\n                        data = {{\r\n                            labels: dailyData.map(({date}) => new Date(date).toLocaleDateString()),\r\n                            datasets:[{\r\n                                data: dailyData.map((data) => data.confirmed),\r\n                                label: 'Infected',\r\n                                borderColor: '#3333ff',\r\n                                fill: true,\r\n                              }, {\r\n                                data: dailyData.map((data) => data.deaths),\r\n                                label: 'Deaths',\r\n                                borderColor: 'red',\r\n                                backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                                fill: true,\r\n                              },],\r\n                        }}\r\n                    />\r\n                ) : null\r\n        \r\n    );\r\n    const barChart = (\r\n        confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: `Current state in ${country}`,\r\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                  data: [confirmed.value, recovered.value, deaths.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFecthedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFecthedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    }, [setFecthedCountries]);\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue = '' onChange = {(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) =><option key = { i } value = { country }>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport Link from '@material-ui/core/Link';\r\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\r\n\r\nexport default function ContactsFooter(){\r\n    return (\r\n        <AppBar className='Footer' position=\"static\" color='transparent'>\r\n          <Container maxWidth=\"lg\">\r\n            <Toolbar>\r\n              <Typography variant=\"body1\" color=\"inherit\">\r\n                <Link target='_blank' href=\"https://github.com/ashushreyansh\">Github Profile</Link> ||  <Link target='_blank' href=\"https://www.linkedin.com/in/shreyansh-chaurasia-5910781a9/\">LinkedIn Profile</Link>\r\n              </Typography>\r\n            </Toolbar>\r\n          </Container>\r\n        </AppBar>\r\n    );\r\n};","export default __webpack_public_path__ + \"static/media/image (2).9e5d4fc7.png\";","//import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport {Cards, Chart, CountryPicker, ContactsFooter} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport CoronaImage from './images/image (2).png';\n\nclass App extends React.Component{\n\n  state = { \n    data: {},\n    country: '',\n  }\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data:fetchedData});\n  }\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({data: fetchedData, country: country});\n  }\n  render(){\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.image} src={CoronaImage} alt='Logo'/>\n        <Cards data ={ data }/>\n        <CountryPicker handleCountryChange = { this.handleCountryChange }/>\n        <Chart data={ data } country ={ country }/>\n        <ContactsFooter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1Vvdk\",\"card\":\"Cards_card__1bS6Y\",\"infected\":\"Cards_infected__1JlGB\",\"recovered\":\"Cards_recovered__nx71D\",\"deaths\":\"Cards_deaths__7Bkbs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2ff9k\",\"image\":\"App_image__3Iy5X\"};"],"sourceRoot":""}